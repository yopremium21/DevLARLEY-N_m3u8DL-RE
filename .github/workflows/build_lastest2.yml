name: Build Latest2

on:
  workflow_dispatch:
    inputs:
      doRelease:
        description: 'Publish new release'
        type: boolean
        default: false
        required: false
      tag:
        type: string
        description: 'Release version tag (e.g. v1.2.3)'
        required: true
      ref:
        type: string
        description: 'Git ref from which to release'
        required: true
        default: 'main'

env:
  DOTNET_SDK_VERSION: "8.0.*"
  ACTIONS_ALLOW_USE_UNSECURE_NODE_VERSION: true

jobs:
  build-win-x64-arm64:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v1

      - name: Set up dotnet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_SDK_VERSION }}

      - run: dotnet build src/N_m3u8DL-RE -r win-x64 -c Release -o build-x64
      - run: dotnet build src/N_m3u8DL-RE -r win-arm64 -c Release -o build-arm64

      - run: dotnet publish src/N_m3u8DL-RE -r win-x64 -c Release -o artifact-x64
      - run: dotnet publish src/N_m3u8DL-RE -r win-arm64 -c Release -o artifact-arm64

      - name: Upload Build Artifact[win-x64]
        uses: actions/upload-artifact@v3.1.3
        with:
          name: N_m3u8DL-RE_Beta_build-win-x64
          path: build-x64

      - name: Upload Build Artifact[win-arm64]
        uses: actions/upload-artifact@v3.1.3
        with:
          name: N_m3u8DL-RE_Beta_build-win-arm64
          path: build-arm64

      - name: Upload Publish Artifact[win-x64]
        uses: actions/upload-artifact@v3.1.3
        with:
          name: N_m3u8DL-RE_Beta_win-x64
          path: artifact-x64\N_m3u8DL-RE.exe

      - name: Upload Publish Artifact[win-arm64]
        uses: actions/upload-artifact@v3.1.3
        with:
          name: N_m3u8DL-RE_Beta_win-arm64
          path: artifact-arm64\N_m3u8DL-RE.exe

  # Repeat similar steps for linux-x64, linux-arm64, and mac-x64-arm64 jobs
  build-linux-x64:
    runs-on: ubuntu-latest
    container: ubuntu:18.04

    steps:
      - run: apt-get update
      - run: apt-get install -y curl wget
      - uses: actions/checkout@v1
      - name: Set up dotnet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_SDK_VERSION }}
      - run: apt-get install -y libicu-dev libcurl4-openssl-dev zlib1g-dev libkrb5-dev
      - run: dotnet build src/N_m3u8DL-RE -r linux-x64 -c Release -o build
      - run: dotnet publish src/N_m3u8DL-RE -r linux-x64 -c Release -o artifact

      - name: Upload Build Artifact[linux-x64]
        uses: actions/upload-artifact@v3.1.3
        with:
          name: N_m3u8DL-RE_Beta_build-linux-x64
          path: build

      - name: Upload Publish Artifact[linux-x64]
        uses: actions/upload-artifact@v3.1.3
        with:
          name: N_m3u8DL-RE_Beta_linux-x64
          path: artifact/N_m3u8DL-RE

  build-linux-arm64:
    runs-on: ubuntu-latest
    container: mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-cross-arm64-20220312201346-b2c2436

    steps:
      - uses: actions/checkout@v1
      - name: Set up dotnet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_SDK_VERSION }}
      - run: dotnet build src/N_m3u8DL-RE -r linux-arm64 -c Release -o build
      - run: dotnet publish src/N_m3u8DL-RE -r linux-arm64 -c Release -p:StripSymbols=true -p:CppCompilerAndLinker=clang-9 -p:SysRoot=/crossrootfs/arm64 -o artifact

      - name: Upload Build Artifact[linux-arm64]
        uses: actions/upload-artifact@v3.1.3
        with:
          name: N_m3u8DL-RE_Beta_build-linux-arm64
          path: build

      - name: Upload Publish Artifact[linux-arm64]
        uses: actions/upload-artifact@v3.1.3
        with:
          name: N_m3u8DL-RE_Beta_linux-arm64
          path: artifact/N_m3u8DL-RE

  build-mac-x64-arm64:
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v1

      - name: Set up dotnet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_SDK_VERSION }}
      - run: dotnet build src/N_m3u8DL-RE -r osx-arm64 -c Release -o build-arm64
      - run: dotnet build src/N_m3u8DL-RE -r osx-x64 -c Release -o build-x64
      - run: dotnet publish src/N_m3u8DL-RE -r osx-arm64 -c Release -o artifact-arm64 
      - run: dotnet publish src/N_m3u8DL-RE -r osx-x64 -c Release -o artifact-x64 

      - name: Upload Build Artifact[osx-x64]
        uses: actions/upload-artifact@v3.1.3
        with:
          name: N_m3u8DL-RE_Beta_build-osx-x64
          path: build-x64

      - name: Upload Build Artifact[osx-arm64]
        uses: actions/upload-artifact@v3.1.3
        with:
          name: N_m3u8DL-RE_Beta_build-osx-arm64
          path: build-arm64

      - name: Upload Publish Artifact[osx-x64]
        uses: actions/upload-artifact@v3.1.3
        with:
          name: N_m3u8DL-RE_Beta_osx-x64
          path: artifact-x64/N_m3u8DL-RE
      - name: Upload Publish Artifact[osx-arm64]
        uses: actions/upload-artifact@v3.1.3
        with:
          name: N_m3u8DL-RE_Beta_osx-arm64
          path: artifact-arm64/N_m3u8DL-RE

  create_draft_release:
    name: Create Github draft release
    if: ${{ github.event.inputs.doRelease == 'true' }}
    needs: [build-win-x64-arm64,build-linux-x64,build-linux-arm64,build-mac-x64-arm64]
    runs-on: ubuntu-latest
    steps:
      - name: Audit gh version
        run: gh --version

      - name: Check for existing release
        id: check_release
        run: |
          echo "::echo::on"
          gh release view --repo '${{ github.repository }}' '${{ github.event.inputs.tag }}' \
            && echo "already_exists=true" >> $GITHUB_ENV \
            || echo "already_exists=false" >> $GITHUB_ENV
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout repo
        if: env.already_exists == 'false'
        uses: actions/checkout@v3
        with:
          ref: '${{ github.event.inputs.ref }}'

      - name: Create release
        if: env.already_exists == 'false'
        run: >
          gh release create
          '${{ github.event.inputs.tag }}'
          --draft
          --repo '${{ github.repository }}'
          --title '${{ github.event.inputs.tag }}'
          --target '${{ github.event.inputs.ref }}'
          --generate-notes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  attach_to_release:
    name: Attach native executables to release
    if: ${{ github.event.inputs.doRelease == 'true' }}
    needs: create_draft_release
    runs-on: ubuntu-latest
    steps:
      - name: Get current date
        id: date
        run: echo "date=$(date +'%Y%m%d')" >> $GITHUB_ENV
        
      - name: GH version
        run: gh --version
      
      - name: Fetch executables
        uses: actions/download-artifact@v3

      - name: Tar (linux, macOS)
        run: for dir in *{osx,linux}*; do tar cvzfp "${dir}_${{ env.date }}.tar.gz" "$dir"; done
        
      - name: Zip (windows)
        run: for dir in *win*; do zip -r "${dir}_${{ env.date }}.zip" "$dir"; done

      - name: Upload
        run: |
          until gh release upload --clobber --repo ${{ github.repository }} ${{ github.event.inputs.tag }} *.zip *.tar.gz; do
            echo "Attempt $((++attempts)) to upload release artifacts failed. Will retry in 20s"
            sleep 20
          done
        timeout-minutes: 10
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
